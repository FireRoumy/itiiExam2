{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "SxnKvX0ci4aL"
   },
   "source": [
    "# Devoir Python\n",
    "\n",
    "Vous devez rendre votre devoir sur GitHub.\n",
    "Vous avez le droit a tout vos documents et a internet\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jk2oA62ui4aW"
   },
   "source": [
    "Ex 1: Pavage\n",
    "\n",
    "\n",
    "Les tuiles du pavage sont toutes hexagonales; elles doivent être disposés dans une grille hexagonale avec un motif de couleur très spécifique.  \n",
    "\n",
    "Les carreaux sont tous blancs d'un côté et noirs de l'autre. Ils commencent avec le côté blanc vers le haut. Le sol est assez grand pour s'adapter à n'importe quel motif qui pourrait y figurer.\n",
    "\n",
    "Un membre de l'équipe de rénovation vous donne une liste des tuiles qui doivent être retournées (le fichier data1.txt). Chaque ligne de la liste identifie une seule tuile qui doit être retournée en donnant une série d'étapes à partir d'une tuile de référence au centre même de la pièce. (Chaque ligne commence à partir de la même vignette de référence.)\n",
    "\n",
    "Comme les tuiles sont hexagonales, chaque tuile a six voisins: est, sud-est, sud-ouest, ouest, nord-ouest et nord-est. Ces directions sont données dans votre liste, respectivement, comme e, se, sw, w, nw et ne. Une tuile est identifiée par une série de ces directions sans délimiteurs; par exemple, \"esenee\" identifie la tuile sur laquelle vous atterrissez si vous commencez à la tuile de référence, puis déplacez une tuile vers l'est, une tuile vers le sud-est, une tuile vers le nord-est et une tuile vers l'est.\n",
    "\n",
    "Chaque fois qu'une tuile est identifiée, elle passe du blanc au noir ou du noir au blanc. Les tuiles peuvent être retournées plus d'une fois. Par exemple, une ligne comme \"esew\" retourne une tuile immédiatement adjacente à la tuile de référence, et une ligne comme nwwswee retourne la tuile de référence elle-même. \n",
    "\n",
    "Parcourez la liste présente dans le fichier et déterminez les tuiles à retourner. Une fois que toutes les instructions ont été suivies, combien de tuiles reste-t-il avec le côté noir vers le haut? \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "On retourne 547 carreaux dont :\n",
      "2 fois 1131221\n",
      "2 fois 1116111\n",
      "2 fois 1116111\n",
      "2 fois 1014042\n",
      "2 fois 1014042\n",
      "2 fois 1131221\n",
      "Mais il y a 6 doublons donc il n'y a que 541 carreaux du côté noir\n"
     ]
    }
   ],
   "source": [
    "file = open('data.txt', \"r\")\n",
    "# utiliser readlines pour lire toutes les lignes du fichier\n",
    "# La variable \"lignes\" est une liste contenant toutes les lignes du fichier\n",
    "lines = file.readlines()\n",
    "# fermez le fichier après avoir lu les lignes\n",
    "file.close()\n",
    "#On compte le nombre de ligne du fichier\n",
    "nbline = 0 \n",
    "for line in lines:\n",
    "    nbline += 1\n",
    "\n",
    "count = 0\n",
    "data = [0]*nbline #création d'un tableau qui fait la taille de ligne du fichier\n",
    "for line in lines:\n",
    "\n",
    "    #on remplace les caractere qui on deux lettres par une seule lettre\n",
    "    chaine = line.strip()\n",
    "    chaine = chaine.replace('se', 'a')#Remplace \"se\" par 'a'.\n",
    "    chaine = chaine.replace('sw', 'b')#Remplace \"sw\" par 'b'.\n",
    "    chaine = chaine.replace('ne', 'c')#Remplace \"ne\" par 'c'.\n",
    "    chaine = chaine.replace('nw', 'd')#Remplace \"nw\" par 'd'.\n",
    "    \n",
    "    #on compte le nombre d'interation de chaque lettres par ligne\n",
    "    counta = 0 \n",
    "    countb = 0\n",
    "    countc = 0\n",
    "    countd = 0\n",
    "    counte = 0\n",
    "    countw = 0\n",
    "    for i in list(chaine):\n",
    "        if ( i == \"a\"):\n",
    "            counta += 1\n",
    "        elif ( i == \"b\"):\n",
    "            countb += 1\n",
    "        elif ( i == \"c\"):\n",
    "            countc += 1\n",
    "        elif ( i == \"d\"):\n",
    "            countd += 1\n",
    "        elif ( i == \"e\"):\n",
    "            counte += 1\n",
    "        elif ( i == \"w\"):\n",
    "            countw += 1\n",
    "            \n",
    "    #on transforme les nombre obtenu en chaine de cartere\n",
    "    a=str(counta)\n",
    "    b=str(countb)\n",
    "    c=str(countc)\n",
    "    d=str(countd)\n",
    "    e=str(counte)\n",
    "    w=str(countw)\n",
    "    # on stocke les chaines de caractere obtenue dans le tableau data\n",
    "    data[count] = (a+b+c+d+e+w)\n",
    "    #on incremente le compteur count utiliser pour savoir l'emplacement dans data\n",
    "    count += 1\n",
    "\n",
    "#affichage du nombre total de carreaux retourner\n",
    "print (\"On retourne\",count,\"carreaux dont :\")\n",
    "#on verifie les doublons pour eviter de compter les carreaux blanc dans les noirs\n",
    "#On verifie chaque chaine de caratere par rapport a data si plus de 1 fois et multiple de 2 alors \n",
    "#c'est que nous nous retrouvons de nouveau côté blanc donc il faudra le soustraire des noir\n",
    "doublons = 0\n",
    "nbdoublons = 0\n",
    "for i in data: \n",
    "    doublons = 0\n",
    "    for j in data:\n",
    "        if ( i == j):\n",
    "            doublons += 1\n",
    "            if (doublons%2 == 0):\n",
    "                print (doublons,\"fois\", i)\n",
    "                nbdoublons += 1\n",
    "\n",
    "print (\"Mais il y a\",nbdoublons ,\"doublons donc il n'y a que\",count-nbdoublons,\"carreaux du côté noir.\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "RarCa3RGi4aa"
   },
   "source": [
    "Ex2 :Combinatoire et chargeur de téléphone.\n",
    "\n",
    "Partie 1 :\n",
    "Lors d'un voyage en avion, votre téléphone n'a plus de batterie. Vous devrez le brancher. Il n'y a qu'un seul problème: la prise de charge près de votre siège produit le mauvais nombre de volt. Vous dressez une liste de tous les adaptateurs de tension dans votre sac.\n",
    "\n",
    "Chacun de vos adaptateurs de tension est évalué pour une tension de sortie spécifique (fichier data2.txt). Tout adaptateur donné peut prendre une entrée de 1, 2 ou 3 volt inférieures à sa valeur nominale tout en produisant sa tension de sortie nominale.\n",
    "\n",
    "De plus, votre appareil dispose d'un adaptateur de tension intégré évalué à 3 volt de plus que l'adaptateur le mieux noté dans votre sac. (Si votre liste d'adaptateurs était 3, 9 et 6, l'adaptateur intégré de votre appareil serait évalué pour 12 volt.)\n",
    "\n",
    "Traitez la prise de charge près de votre siège comme ayant une cote de tension effective de 0.\n",
    "\n",
    "Puisque vous avez un peu de temps à tuer, autant tester tous vos adaptateurs. \n",
    "\n",
    "Si vous utilisez tous les adaptateurs de votre sac à la fois, quelle est la répartition des différences de tension entre la prise de charge, les adaptateurs et votre appareil?\n",
    "\n",
    "Par exemple, supposons que dans votre sac, vous avez des adaptateurs avec les cotes de tension suivantes: \n",
    "\n",
    "16\n",
    "\n",
    "10\n",
    "\n",
    "15\n",
    "\n",
    "5\n",
    "\n",
    "1\n",
    "\n",
    "11\n",
    "\n",
    "7\n",
    "\n",
    "19\n",
    "\n",
    "6\n",
    "\n",
    "12\n",
    "\n",
    "4\n",
    "\n",
    "Avec ces adaptateurs, l'adaptateur de tension intégré de votre appareil serait évalué pour 19 + 3 = 22 volt, 3 de plus que l'adaptateur le mieux noté.\n",
    "\n",
    "Étant donné que les adaptateurs ne peuvent se connecter qu'à une source de 1 à 3 volt inférieures à sa valeur nominale, pour utiliser chaque adaptateur, vous devez les choisir comme suit:\n",
    "\n",
    "* La prise de charge a une cote effective de 0 volt, de sorte que les seuls adaptateurs qui pourraient s'y connecter directement devraient avoir une cote de tension de 1, 2 ou 3 volt. Parmi ceux-ci, un seul que vous avez est un adaptateur évalué à 1 volt(différence de 1).\n",
    "* À partir de votre adaptateur évalué à 1 secousse, le seul choix est votre adaptateur évalué à 4 volt (différence de 3).\n",
    "* À partir de l'adaptateur évalué à 4 volt, les adaptateurs classés 5, 6 ou 7 sont des choix valides. Cependant, pour ne sauter aucun adaptateur, vous devez choisir l'adaptateur évalué à 5 volt (différence de 1).\n",
    "* De même, les choix suivants devraient être l'adaptateur classé 6, puis l'adaptateur noté 7 (avec une différence de 1 et 1).\n",
    "* Le seul adaptateur qui fonctionne avec l'adaptateur évalué à 7 secousses est celui évalué à 10 volt (différence de 3).\n",
    "* À partir de 10, les choix sont 11 ou 12; choisissez 11 (différence de 1) puis 12 (différence de 1).\n",
    "* Après 12, seul l'adaptateur valide a une cote de 15 (différence de 3), puis 16 (différence de 1), puis 19 (différence de 3).\n",
    "* Enfin, l'adaptateur intégré de votre appareil est toujours 3 plus élevé que l'adaptateur le plus élevé, donc sa cote est de 22 volt (toujours une différence de 3).\n",
    "\n",
    "Dans cet exemple, lors de l'utilisation de chaque adaptateur, il y a 7 différences de 1 volt et 5 différences de 3 volt. \n",
    "\n",
    "\n",
    "Trouvez une chaîne qui utilise tous vos adaptateurs pour connecter la prise de charge à l'adaptateur intégré de votre appareil et comptez les différences de tension entre la prise de charge, les adaptateurs et votre appareil.\n",
    "\n",
    "Partie 2:\n",
    "Pour déterminer complètement si vous disposez de suffisamment d'adaptateurs, vous devrez déterminer le nombre de manières différentes de les organiser. Chaque arrangement doit connecter la prise de charge à votre appareil. Les règles précédentes concernant le moment où les adaptateurs peuvent se connecter avec succès s'appliquent toujours.\n",
    "\n",
    "Le premier exemple ci-dessus (celui qui commence par 16, 10, 15) prend en charge les arrangements suivants:\n",
    "\n",
    "(0), 1, 4, 5, 6, 7, 10, 11, 12, 15, 16, 19, (22)\n",
    "\n",
    "(0), 1, 4, 5, 6, 7, 10, 12, 15, 16, 19, (22)\n",
    "\n",
    "(0), 1, 4, 5, 7, 10, 11, 12, 15, 16, 19, (22)\n",
    "\n",
    "(0), 1, 4, 5, 7, 10, 12, 15, 16, 19, (22)\n",
    "\n",
    "(0), 1, 4, 6, 7, 10, 11, 12, 15, 16, 19, (22)\n",
    "\n",
    "(0), 1, 4, 6, 7, 10, 12, 15, 16, 19, (22)\n",
    "\n",
    "(0), 1, 4, 7, 10, 11, 12, 15, 16, 19, (22)\n",
    "\n",
    "(0), 1, 4, 7, 10, 12, 15, 16, 19, (22)\n",
    "\n",
    "(La prise de charge et l'adaptateur intégré de votre appareil sont indiqués entre parenthèses.) Compte tenu des adaptateurs du premier exemple, le nombre total d'arrangements qui connectent la prise de charge à votre appareil est de 8.\n",
    "\n",
    "Vous jetez un coup d'œil à votre sac et essayez de vous rappeler pourquoi vous avez apporté autant d'adaptateurs; il doit y avoir plus d'un billion de moyens valides pour les organiser! Il doit sûrement y avoir un moyen efficace de compter les arrangements.\n",
    "\n",
    "Quel est le nombre total de façons distinctes de disposer les adaptateurs pour connecter la prise de charge à votre appareil?\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "En utilisant tous les accumulateurs on peux faire :\n",
      " mur (0v) =>  [1, 2, 5, 6, 7, 8, 9, 12, 15, 18, 19, 20, 21, 22, 25, 26, 27, 28, 29, 32, 33, 34, 35, 38, 39, 42, 45, 48, 51, 54, 55, 56, 57, 58, 61, 64, 67, 68, 69, 70, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 87, 88, 89, 90, 93, 94, 95, 96, 97, 100, 101, 102, 103, 106, 109, 112, 113, 114, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 131, 134, 135, 136, 137, 140, 141, 142, 145, 146, 147, 148, 151, 152, 153, 154, 155, 158, 159, 160, 161, 162, 165, 166]  => tel ( 169 v)\n",
      "\n",
      "\n",
      "70 sauts de 1\t 33 sauts de 3\t 103 nombre de sauts total\t 102 accumulateurs\n",
      "47 accumulateurs ne sont pas nécessaire soit 140737488355328 combinaisons possibles\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "file = open('data2.txt', \"r\")\n",
    "# utiliser readlines pour lire toutes les lignes du fichier\n",
    "# La variable \"lignes\" est une liste contenant toutes les lignes du fichier\n",
    "lines = file.readlines()\n",
    "# fermez le fichier après avoir lu les lignes\n",
    "file.close()\n",
    "max = 0\n",
    "count = 0\n",
    "nbline = 0\n",
    "\n",
    "# Itérer sur les lignes\n",
    "\n",
    "for line in lines:\n",
    "    nbline += 1\n",
    "    \n",
    "data = [0]*nbline\n",
    "data2 = [0]*nbline\n",
    "\n",
    "# on rempli le tableau data avec chaine de caratere convetie en int retrouvé dans le fichier\n",
    "for line in lines:\n",
    "    #print(line.strip())\n",
    "    int_line = int(line.strip() )\n",
    "    data[count] = int_line\n",
    "    if(max < int_line) :\n",
    "        max = int_line\n",
    "    count += 1\n",
    "\n",
    "#on defini la fonction tri_ins a appliquer sur notre tableau  pour le trier\n",
    "def tri_ins(t):\n",
    "    for k in range(1,len(t)):\n",
    "        temp=t[k]\n",
    "        j=k\n",
    "        while j>0 and temp<t[j-1]:\n",
    "            t[j]=t[j-1]\n",
    "            j-=1\n",
    "        t[j]=temp\n",
    "    return t\n",
    "\n",
    "# on tri notre tableau data pour avoir les accumulateurs du plus petit au plus grand et ainsi compter\n",
    "# facilement saut de 1 ou de 3\n",
    "tri_ins(data)\n",
    "print (\"En utilisant tous les accumulateurs on peux faire :\\n mur (0v) => \", data , \" => tel (\", max+3,\"v)\\n\\n\")  \n",
    "#on defini la fonction test a appliquer sur notre tableau    \n",
    "def test(t,nbline):\n",
    "    nbpossibilite = 0 #permet de compter le nb d'accumulateur qui ne sont pas necessaire\n",
    "    counttest = 0 #permet de compter le nombre de saut a 1 consecutif\n",
    "    nbsaut1 = 1 #on pars de 1 pour compter le saut du mur au premier accumulateurs\n",
    "    nbsaut3 = 1 #on pars de 1 pour compter le saut dernier accumulateurs au telephone\n",
    "    for i in range(nbline-1):\n",
    "        #On compte le nombre de saut a 1\n",
    "        if (data[i] + 1 == data[i+1] ) :\n",
    "            counttest += 1\n",
    "            #On compte le nombre de saut a 1 consecutif et si on depasse 2 alors on incremente la variable des accumulateur\n",
    "            # que l'on va pouvoir supprimer pour optimiser notre branchement\n",
    "            if (counttest >= 2) :\n",
    "                nbpossibilite += 1\n",
    "            nbsaut1 += 1\n",
    "            \n",
    "        #On compte le nombre de saut a 3  \n",
    "        elif (data[i] + 3 == data[i+1] ) :\n",
    "            counttest = 0\n",
    "            nbsaut3 += 1\n",
    "            #print (data[i+1])\n",
    "      \n",
    "    print (nbsaut1,\"sauts de 1\\t\",nbsaut3,\"sauts de 3\\t\",nbsaut1+nbsaut3, \"nombre de sauts total\\t\",nbline, \"accumulateurs\")\n",
    "    print (nbpossibilite ,\"accumulateurs ne sont pas nécessaire soit\", 2**nbpossibilite ,\"combinaisons possibles\")\n",
    "\n",
    "test (data,nbline)\n"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "Copie de itiiPythonExam.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
